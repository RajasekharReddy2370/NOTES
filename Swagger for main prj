main project swagger


installed drf-jasg module [pip install drf-yasg]

added drf_yasg in settings installes apps

added the swagger lines in the settings url file

added the sttings url path


from django.urls import include,path
from django.contrib import admin


from drf_yasg import openapi
from drf_yasg.views import get_schema_view
from drf_yasg.inspectors import SwaggerAutoSchema
from rest_framework import permissions

schema_view = get_schema_view(
   openapi.Info(
      title="API DOCUMENTATION",
      default_version='v1',
      description="API documentation for Your Project",
      terms_of_service="https://www.example.com/policies/terms/",
      contact=openapi.Contact(email="krr@gmail.com"),
      license=openapi.License(name="MIT License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
   # Add customizations if needed, like validators and security
   validators=['flex', 'ssv'],
   # security='4r'
)


# from django.conf import settings
urlpatterns = [
    path("app1/",include('people.urls')),
    path("admin/",admin.site.urls),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('swagger.json', schema_view.without_ui(cache_timeout=0), name='schema-json'),



###########################################################################################################################
Upload swagger file and create table in the database
###########################################################################################################################

import json
import mysql.connector
import requests

# Function to connect to the MySQL database
def connect_db():
    conn = mysql.connector.connect(
        host='localhost',  # Replace with your MySQL host (e.g., 'localhost')
        user='root',  # Replace with your MySQL user (e.g., 'root')
        password='Raj@2370',  # Replace with your MySQL password
        database='swag'  # Replace with your MySQL database name
    )
    return conn

# Function to create the table (if not exists)
def create_table(conn):
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS API (
        Id INT AUTO_INCREMENT PRIMARY KEY,
        Method VARCHAR(10),
        Endpoint VARCHAR(255),
        Description TEXT,
        Payload TEXT,
        Parameters TEXT
    )''')
    conn.commit()

# Function to insert data into the database
def insert_data(conn, method, endpoint, description, payload, parameters):
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO API (Method, Endpoint, Description, Payload, Parameters) 
    VALUES (%s, %s, %s, %s, %s)''', (method, endpoint, description, payload, parameters))
    conn.commit()

# Function to parse Swagger file and extract data
def parse_swagger(conn, swagger_url):  # Pass conn as an argument here
    # If the Swagger file is a URL, you can fetch it with requests
    if swagger_url.startswith('http'):
        response = requests.get(swagger_url)
        swagger_data = response.json()  # Assuming Swagger file is in JSON format
    else:
        with open(swagger_url, 'r') as file:
            swagger_data = json.load(file)  # Read local Swagger file

    # Iterate over the paths and methods in the Swagger file
    for path, methods in swagger_data.get('paths', {}).items():
        for method, details in methods.items():
            # Extract relevant details (method, endpoint, description, payload, and parameters)
            method_type = method.upper()  # Ensure method is in uppercase (GET, POST, etc.)
            if method_type in ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']:
                endpoint = path
                description = details.get('summary', '')  # Get the description from 'summary' key
                parameters = [param.get('name') for param in details.get('parameters', [])]  # Extract only the names
                parameters = json.dumps(parameters)  # Store as JSON array of names

                # Extract payload (if present)
                payload = details.get('requestBody', {}).get('content', {}).get('application/json', {}).get('schema',
                                                                                                            {})
                payload = json.dumps(payload) if payload else '{}'  # Use '{}' if no payload is specified

                # Insert the data into the database
                insert_data(conn, method_type, endpoint, description, payload, parameters)

# Main function to run the process
def main():
    # Connect to the database
    conn = connect_db()
    create_table(conn)

    # Parse the Swagger file and insert data into the database
    swagger_url = '/Users/c360/Downloads/openapi.json'  # Update with your Swagger file URL or path
    parse_swagger(conn, swagger_url)  # Pass conn as an argument to parse_swagger

    # Close the database connection
    conn.close()

# Run the main function
if __name__ == "__main__":
    main()

###########################################################################################################################
Retrieve the Method, Endpoint, Description from the database
###########################################################################################################################
import mysql.connector
import json
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama.llms import OllamaLLM

# Establish the connection to the database
conn = mysql.connector.connect(
    host='localhost',        # e.g., 'localhost' or an IP address
    user='root',    # your MySQL username
    password='Raj@2370',# your MySQL password
    database='swag' # your database name
)

# Create a cursor object to execute queries
cursor = conn.cursor()

# Query to fetch Method, endpoint, and description from the Api table
query = "SELECT Method, endpoint, description FROM Api"

# Execute the query
cursor.execute(query)

# Fetch all rows from the query result
rows = cursor.fetchall()

# Format the output into a single string
api_list = "\n".join([f"Method: {row[0]}, Endpoint: {row[1]}, Description: {row[2]}" for row in rows])

# Print the result
print(api_list)

# Close the cursor and connection
cursor.close()
conn.close()

###########################################################################################################################
Implement opensource LLM
###########################################################################################################################
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama.llms import OllamaLLM

template = """Question: {question}

Answer: Let's think step by step."""

prompt = ChatPromptTemplate.from_template(template)

model = OllamaLLM(model="mistral")

chain = prompt | model

res = chain.invoke({"question": "who are you?"})

print('res', res)

###########################################################################################################################
Implement opensource LLM with database retriewing
###########################################################################################################################
import mysql.connector
import json
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama.llms import OllamaLLM

# Establish the connection to the database
conn = mysql.connector.connect(
    host='localhost',        # e.g., 'localhost' or an IP address
    user='root',    # your MySQL username
    password='Raj@2370',# your MySQL password
    database='swag' # your database name
)

# Create a cursor object to execute queries
cursor = conn.cursor()

# Query to fetch Method, endpoint, and description from the Api table
query = "SELECT Method, endpoint, description FROM Api"

# Execute the query
cursor.execute(query)

# Fetch all rows from the query result
rows = cursor.fetchall()

# Format the output into a single string
api_list = "\n".join([f"Method: {row[0]}, Endpoint: {row[1]}, Description: {row[2]}" for row in rows])

# Print the result
print(api_list)

# Close the cursor and connection
cursor.close()
conn.close()

llm = OllamaLLM(model="mistral")
main_agent_messages = [
            ("system", "- You are a agent who will choose the suitable API endpoint based on the human question."
                       "- This is the API list : {api_list}"
                       "- Provide the output in the JSON format with Endpoint, Method as the keys."
                       "- Strictly follow the given key names while generating the JSON."
                       "- Only choose one endpoint for one question"),
            ("human", " Provide the API which suits the given question : {question}. "),
            ]
main_agent_prompt = ChatPromptTemplate(main_agent_messages)

main_agent_invoke = main_agent_prompt.invoke({
                "api_list":api_list,
                "question": "create multiple users abhilash, raja, vamsi",
            })
main_agent_res = llm.invoke(main_agent_invoke)
print(main_agent_res)
if isinstance(main_agent_res, str):
    main_agent_res = json.loads(main_agent_res)
    if isinstance(main_agent_res, dict):
        endpoint = main_agent_res.get('Endpoint')
        method = main_agent_res.get('Method')
        print(endpoint, method)

