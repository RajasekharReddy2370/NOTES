✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️
                                    AWS-Connect with Python and Accesss the s3
✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️


https://www.youtube.com/watch?v=JKlOlDFwsao

import boto3
import paandas as pd

# 1. ####################### FOR ACCESSING S3 BUCKET IN AWS ############################

s3 = boto3.resource(
      service_name = 'S3',
      region_name = "region",
      aws_access_key_id = ".......",
      aws_secret_access_key = "....."
)


for bucket in s3.buckets.all():
  print(bucket.name)

raja [think this is one of a bucket name]

# 2. ####################### CREATING TWO FILES IN THE LOCAL TO UPLOAD TO AWS S3 ########

foo = pd.DataFrame({'x':[1,2,3], 'y':['a','b','c']})
bar = pd.DataFrame({'x':[10,20,30], 'y':['aa','bb','cc']})

foo.to_csv('foo.csv')
bar.to_csv('bar.csv')

# 3. ####################### FOR UPLOADING FILES INTO AWS BUCKET ########################

s3.Bucket('raja').upload_file(Filename='foo.csv',key='foo.csv')
s3.Bucket('raja').upload_file(Filename='bar.csv',key='bar.csv')

# 4. ####################### FOR DOWNLOADING FILES FROM THE AWS BUCKET ########################

s3.Bucket('raja').download_file(Filename='foo1.csv',key='foo.csv') [The key should be filename in AWS s3 bucket the Filename is yourwish with which name you want to download the file]
s3.Bucket('raja').download_file(Filename='bar1.csv',key='bar.csv')

# 5. #################### TO SEE THE FILES IN PARTICULAR BUCKET ########################
for obj in s3.Bucket('raja').objects.all():
  print(obj)

# 5. ################### TO LOAD THE DATA FROM THE AWS ###############################
obj = s3.Bucket('raja').Object('foo.csv').get()
foo = pd.read_csv(obj['Body'], index_col = 0)
print(type(foo))

print(foo)
✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️
                                                AWS-CONSOLE
✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️✍️


create a table in AWS dynamodb
create table Tablename
enter partition Key
enter sort key
click defaut settings
click create table

click on table name
click on explore items
click on create item
enter the values 
click on create item

GO to AWS IAM
in Access Management click on Roles
click on create Role in blue box
click on lambda --> Next bluebox
enter dynamodb in search bar
click on Amazon dynamodb full access --> Next bluebox
on Role name enter lambda-dynamodb-full-access
click on create Role
go to lambda services in AWS
click on create function
enter function name
change programming language 
click on change default execution role
click on Use an existing role
in search bar enter the Role name before crteated
click on create function


CREATING LAMBDA FUNCTION TO CREATE DATA TO DYNAMODB

CREATING_OR_INSERTING_DATA : ========>

import boto3
import json
import uuid

# Initialize DynamoDB client
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('YourTableName')  # Replace with your table name

def lambda_handler(event, context):
    # Generate a unique ID
    item_id = str(uuid.uuid4())

    # Sample item to insert
    item = {
        'id': item_id,
        'name': event['name'],  # Extract from event input
        'age': event.get('age', 0)  # Default value if age is not provided
    }

    # Insert into DynamoDB
    table.put_item(Item=item)

    return {
        'statusCode': 200,
        'body': json.dumps({'message': 'Item added successfully!', 'item': item})
    }


IN CONSOLE 

import json
import boto3
dynamodb_client = boto3.resource('dynamodb')
table = dynamodb_client.Table('TABLE_NAME')

def lambda_handler(event,context):
      try:
            response = table.put_item(Item=event)
            return table.scan()
      except:
            raise

click on test button write the event name and json you want and click on deploy

The json fields should be the columns of the table created

click on test the answer will appear and check also in dynamo db

READING_DATA FROM DYNAMO_DB : ==========>


import json
import boto3
dynamodb_client = boto3.resource('dynamodb')
def lambda_handler(event,context):
  data = dynamodb_client.scan(TableName = 'DBTABLENAME')

  response = {
      'statuscode':200,
      'body':json.dumps(data),
      'headers':{
            'Content-Type':'application/json',
            'Access-Contron-Allow-Origin':'*'
            },
      }
  return response


