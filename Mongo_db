#################################################### MYSQL #####################################################
port is 3306
install mysql workbench
install community server

show databases;
create database if not exists database_name;
use database_name;
select database();

################################################  POST_GRES ###################################################
port 5432
postgres
select datname from pg_database;
create database database_name;
\c database_name();
select current_databse();

################################################# MONGO_DB #########################################################
the port is 27017
Mongo_db is a no_sql database
it is a document database
flexible schems
mongodb Atlas for cloud database
mongodb compass for query and visualization

queries

show dbs;
use dbname or New dbname;
db;

Fields - columns
Document - rows
multiple_documents - collection   [Table]
multiple_collections  - database

========================================================CRUD operations========================================================
use database_name;
show collections;
db.createCollection('NEW_DOCUMENT_NAME');
db.getCollection('COLLECTION_NAME')


INSERT
db.collection.insertOne({});
db.collection.insertMany([{}]);

REMOVE
db.coolection.find().remove()

UPDATE
db.collection.find({c:v});
db.collection.updateOne({c:v},{$set:{c:v}})
db.collection.updateOne({c:v},{$set:{c:v}},{ upsert: true }); [IT WILL UPLOAD A NEW RECORD IF NOT FOUND]
db.collection.updateMany({}, { $inc: { likes: 1 } })

DELETE
db.posts.deleteOne({ title: "Post Title 5" })
db.posts.deleteMany({ title: "Post Title 5" })

SEARCH
db.posts.find()
db.posts.find({category: "News"})
for include 1 for exclude 0
db.posts.find({}, {title: 1, date: 1})   ---------[only particular columns]
db.posts.find({}, {_id: 0, title: 1, date: 1})   ----[exclude id column]

===========================================================FILTERS============================================================

db.getCollection('COLLECTION_NAME').find({c:v},{c:v})
db.getCollection('COLLECTION_NAME').find({c:v},{c:v}).count()

 = != > < >= <=
db.getCollection('COLLECTION_NAME').find({'color' :{"$eq":"green"}})
db.getCollection('COLLECTION_NAME').find({'color' :{"$ne":"green"}})
db.getCollection('COLLECTION_NAME').find({'age' :{"$gt": 25}})
db.getCollection('COLLECTION_NAME').find({'age' :{"$gte": 25}})
db.getCollection('COLLECTION_NAME').find({'age' :{"$lt": 25}})
db.getCollection('COLLECTION_NAME').find({'age' :{"$lte": 25}})


BETWEEN
db.getCollection('COLLECTION_NAME').find({'age' :{"$gt": 25, "$lt": 45}})

SORTING for 1 Ascending_order  -1 Descending order
db.getCollection('COLLECTION_NAME').find({c:v},{c:v}).sort({c:1})
db.getCollection('COLLECTION_NAME').find({c:v},{c:v}).sort({c:-1})

IN and NOTIN
db.getCollection('COLLECTION_NAME').find({"Name":{"$in":["Raj","chen"]}})
db.getCollection('COLLECTION_NAME').find({"Name":{"$nin":["Raj","chen"]}})

AND
db.getCollection('COLLECTION_NAME').find({$and:[{"Name":"Raj"},{"Age":25}]})
db.getCollection('COLLECTION_NAME').find({"Name":"Raj"},{"Age":25})

OR
db.getCollection('COLLECTION_NAME').find({$or:[{"Name":"Raj"},{"Age":25}]})
db.getCollection('COLLECTION_NAME').find({"Name":"Raj"},{"Age":25})

Embedded Documents like list in list
db.getCollection('COLLECTION_NAME').find({"maincolumn.subcolumn":value})

For INDEXING in Lists
db.getCollection('COLLECTION_NAME').find({"maincolumn.position":value})

ALL
db.getCollection('COLLECTION_NAME').find({'vehicles' :{$all:['bikes','cars','jeeps']}})

SIZE
db.getCollection('COLLECTION_NAME').find({'vehicles' :{$size:4}})



























