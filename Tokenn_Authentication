
The proton guy

rest_framework.authtoken

from rest_framework.authtoken.models import Token
from rest_framework.auth.models import User

from rest_framework.response import Response

from rest_framework import status


from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed

import jwt,datetime

###########################################################################

for user in models table

from .models import User
from .serializers import Userserializer
class Registerview(APIView):
    def post(self,request):
        serializer = Userserializer(data = request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data)
        
##########################################################################

for django default user model

class Register(APIView):
    def post(self,request):
        first_name = request.data['first_name']
        last_name = request.data['last_name']
        username = request.data['username']
        email = request.data['email']
        password = request.data['password']

        if User.objects.filter(username=username).exists():
            return Response("USER ALREADY EXISTS", status=400)
        user = User.objects.create_user(
            first_name = first_name,
            last_name = last_name,
            username = username,
            email = email,
        )
        user.set_password(password)
        user.save()
        return Response({'status':200,'payload':"user created successfully"})
        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class loginview(APIView):
    def post(self,request):
        email = request.data['email']
        password = request.data['password']
        user = User.objects.filter(email = email).first()
        if user is None:
            raise AuthenticationFailed("user not found")

        if password == user.password:
            return Response({
                'message': 'success'
            })
        # if not user.check_password(password):
        #     raise AuthenticationFailed("Incorrect password")

        # return Response({
        #     'message':'success'
        # })

# class LoginView(APIView):
#     def post(self, request):
#         email = request.data.get('email')
#         password = request.data.get('password')
#
#         if not email or not password:
#             raise AuthenticationFailed("Both email and password are required.")
#
#         user = User.objects.filter(email=email).first()
#
#         if user is None:
#             raise AuthenticationFailed("User not found.")
#
#         if not user.check_password(password):
#             raise AuthenticationFailed("Incorrect password.")
#
#         payload = {
#             "id":user.id,
#             'exp':datetime.datetime.utcnow()+datetime.timedelta(minutes = 60),
#             'iat':datetime.datetime.utcnow()
#         }
#
#         token = jwt.encode(payload,'secret',algorithm='HS256').decode('utf-8')
#
#         # Authentication successful
#         # return Response({'message': 'Login successful.'})
#         # response = Response({
#         #     'jwt':token
#         # })
#
#         response = Response()
#         response.set_cookie(key = 'jwt',value = token,httponly  = True)
#         response.data = {
#             'jwt':token
#         }
#
#         return response
