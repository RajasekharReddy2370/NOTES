Self Introduction:
                  Hi, I’m Rajasekhar Reddy from Andhra Pradesh. I’ve completed a Data Analytics course at Great Learning in Hyderabad.
                  I have 1 year of experience in software development and am skilled in Python, databases (MySQL, PostgreSQL, MongoDB), 
                  and basic knowledge of Django, REST APIs, and frontend technologies like HTML and CSS. I’ve also explored LangChain.

######################################################################################################################################
                                                                HR QUESTIONS
######################################################################################################################################

1. WHY DO YOU WANT TO CHANGE YOUR COMPANY?
2. WHAT IS YOUR NOTICE PERIOD?
3. IF HE NEEDS IMMEDIATE JOINER?
4. WHAT ARE THE PROJECTS U WORKED ON?
######################################################################################################################################
                                                                Itoconnect
######################################################################################################################################

user
subuser
pollingbooth
ward issues

IToConnect is a public relations management system designed for managing voter data efficiently.
Once the user onboarded to the application, admin of the application should be given access to the users inorder to use the services
user also given access to create sub-users and allocate the polling booths, villages to them, 
so that the sub-user will only have the access to those polling booth related voters.
Sub-users can go on the field and they will make the surveys related to ward-issues, 
Top hierarchy users will be able to see the graphs related to favour votes and the issues reported by the sub-user.

Django as a framework,
Backend is with python
Frontend is built with ReactJS
connection using API's
Database - Mysql

ROLES:-
API Development and Integration : 
Develop RESTful APIs using Django REST Framework (DRF) to connect the backend with the ReactJS frontend.
Ensure API endpoints are secure, efficient, and well-documented.

Database Management:
Design and manage database schemas for MySQL to store user data, voter information, polling booths, surveys, and other related data.
Write optimized and secure SQL queries for CRUD operations.
Handle database migrations using Django's migration system.



######################################################################################################################################
                                                            RFID
#######################################################################################################################################





######################################################################################################################################
                                                            SHIPPER-COPILOT
#######################################################################################################################################

Overview : 
This application is built on python django framework. Where we have made a REST API which recieves the payload from the shippercopilot application. 
The payload consists of different parameters including : 
    question : this is the question asked by the user in the chatbot UI.
    X-Token : which is used to consume node API's with which we make the shipments.
    node_endpoint : this is the micro-service endpoint.
    carrier_endpoint : this is the micro-service to send the order to the carriers.
    location_id : this is the user ID with which we filter the details for the user question.
    environment : this is the environment from where the API is consumed (dev, demo)

In the API we consume openAI API to get the user intent. Here we have used the agentic approach where each agent is responsible for making decision based on the prompt given to it. We have three agents. 
    Agent 1 : The agent analyzes the language and context of your query to identify whether it’s a GET or POST request, streamlining your interactions
    Agent 2 : When you ask a question about retrieving data (like querying a database for specific information), the agent identifies it as a GET request and generates the appropriate SQL query for you (in the prompt we give the schema of the tables we needed.)
    Agent 3 : The agent extracts relevant details from user question and creates a precise JSON object that contains - person name, company name, product name, carrier name

    If the question is related to GET then we create the sql query for it and send back the query in the response.
    If the question is related to POST then we connect to the postgres database and get the address details, product details, 
user location (from address), carrier details. If user question doesn't have key related to the carrier then default carrier is picked.
We also ensure if the shipment is internationl, in this case we only query the international carrier services only and choose one randomly. 
If address or product are in multiple then we send back all the formated details back in the response where user will select one and send back the payload to another API. 
For all success response we have added 'type' keyword where it defines the response object type (MULTIPLE, LABLE, SQL, SHIP)






######################################################################################################################################
                                                            AIVOICE
#######################################################################################################################################

Generate the voice of any person based on their related data such as voice
processing the voice files 

Developed an end-to-end automation pipeline for processing YouTube videos,
integrating audio processing, transcription, and training workflows through a custom-built website.

Engineered a module for video-to-audio conversion, denoising,
and parallel uploading to Amazon S3 for efficient data storage and processing.

youtube links
denoising
clips cutting
genarate transcripts [extracting text from voice] using Speech recognition
check text of the particular voice is correct or not
checking parameters of the voice(samplrate,channels,pcmformat etc)
training (inference training)
model

######################################################################################################################################
                                                              RAG
######################################################################################################################################

Developed a Retrieval-Augmented Generation (RAG) application leveraging LangChain and
ChromaDB to enhance the accuracy and relevance of AI-generated responses.
Integrated ChromaDB as a vector database for efficient and scalable embedding storage and retrieval in the application.
